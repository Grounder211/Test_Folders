# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: file-server
---
# ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: file-server-config
  namespace: file-server
data:
  FILES_DIR: "/app/files"
  PORT: "5000"
---
# PersistentVolume
apiVersion: v1
kind: PersistentVolume
metadata:
  name: file-server-pv
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: local-storage
  local:
    path: /data/files  # Your physical server path
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/hostname
          operator: In
          values:
          - your-node-name  # Replace with actual node
---
# PersistentVolumeClaim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: file-server-pvc
  namespace: file-server
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: local-storage
---
# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: file-server
  namespace: file-server
spec:
  replicas: 3
  selector:
    matchLabels:
      app: file-server
  template:
    metadata:
      labels:
        app: file-server
    spec:
      containers:
      - name: file-server
        image: your-dockerhub-username/python-file-server:latest
        ports:
        - containerPort: 5000
        env:
        - name: FILES_DIR
          valueFrom:
            configMapKeyRef:
              name: file-server-config
              key: FILES_DIR
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: file-server-config
              key: PORT
        volumeMounts:
        - name: files-volume
          mountPath: /app/files
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: files-volume
        persistentVolumeClaim:
          claimName: file-server-pvc
---
# Service
apiVersion: v1
kind: Service
metadata:
  name: file-server-service
  namespace: file-server
spec:
  selector:
    app: file-server
  ports:
  - port: 80
    targetPort: 5000
  type: ClusterIP
---
# Ingress with HTTPS
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: file-server-ingress
  namespace: file-server
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
spec:
  tls:
  - hosts:
    - file-server.local
    secretName: file-server-tls
  rules:
  - host: file-server.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: file-server-service
            port:
              number: 80
---
# HPA for auto-scaling
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: file-server-hpa
  namespace: file-server
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: file-server
  minReplicas: 2
  maxReplicas: 8
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
